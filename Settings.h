#include <MobaTools.h>
#include <Smoothed.h>


#define RECORD_SWITCH_PIN 5       // New pin for the record/replay switch
#define RESET_SWITCH_PIN  65

#define MAX_POSITIONS     50      // Maximum number of positions to record

//Define pins for steppers
#define STEP_PIN_HIGH     54      // Step
#define DIR_PIN_HIGH      55      // Direction
#define ENABLE_PIN_HIGH   38

#define STEP_PIN_LOW      60      // Step
#define DIR_PIN_LOW       61      // Direction
#define ENABLE_PIN_LOW    56

#define STEP_PIN_RAIL      26     // Step
#define DIR_PIN_RAIL       28     // Direction
#define ENABLE_PIN_RAIL    24

#define STEP_PIN_CONV      46     // Step
#define DIR_PIN_CONV       48     // Direction
#define ENABLE_PIN_CONV    62

#define ENDSTOP_RAIL       18
#define ENDSTOP_LOW        14
#define ENDSTOP_HIGH        3

#define BUTTON_GRABBER     40
#define SERVO_PIN          11



//Define values for motor tuning
#define STEPS_PER_REV 14400

#define XYspeed 2500
#define XYrampLength 0

#define railSpeed_Homing 1000
#define railSpeed 1050

#define convSpeed 500

#define grabberSpeed 20

#define SMOOTHING_COUNT 35  //number of analog readings that are used for Y and Z average

#define MOBA_DELAY 15  //delay in milliseconds needed for MobaTools - unknown error

int xPos = 0;
long lowSteps = 0;
long highSteps = 0;
long highStepsAdj = 0;

//for Checking height
const int highMax[] = {
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791,
5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791,
5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 5791, 
5779, 5767, 5754, 5741, 5729, 5716, 5704, 5691, 5678, 5666, 
5653, 5641, 5628, 5615, 5603, 5590, 5576, 5561, 5547, 5532, 
5517, 5502, 5488, 5473, 5458, 5443, 5428, 5412, 5397, 5382, 
5367, 5352, 5336, 5321, 5306, 5291, 5276, 5261, 5251, 5244, 
5238, 5231, 5224, 5218, 5211, 5205, 5198, 5192, 5185, 5177, 
5169, 5161, 5153, 5145, 5137, 5129, 5121, 5113, 5105, 5097, 
5089, 5081, 5073, 5063, 5049, 5035, 5021, 5007, 4994, 4980, 
4966, 4952, 4938, 4924, 4910, 4896, 4883, 4869, 4855, 4841, 
4827, 4813, 4799, 4786, 4776, 4766, 4756, 4746, 4736, 4726, 
4716, 4706, 4696, 4686, 4676, 4666, 4656, 4646, 4636, 4625, 
4613, 4601, 4589, 4577, 4565, 4553, 4541, 4529, 4516, 4504, 
4492, 4480, 4468, 4456, 4444, 4432,
4420, 4408, 4396, 4384, 
4372, 4360, 4348, 4337, 4327, 4317, 4307, 4296, 4286, 4276, 
4266, 4255, 4245, 4235, 4225, 4214, 4204, 4194, 4184, 4173, 
4163, 4153, 4143, 4132, 4122, 4112, 4102, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 
4100
};

//Sensor smoothing
Smoothed<int> shoulderSensor;
Smoothed<int> elbowSensor;
Smoothed<int> irSensor;

int sensorValue;

// variables for timed updates
unsigned long lastUpdateTime = 0;
const unsigned long UPDATE_INTERVAL = 20; // 20ms = 50 times per second

//steppers
MoToStepper stepperHigh(400, STEPDIR);
MoToStepper stepperLow(400, STEPDIR);
MoToStepper stepperRail(400, STEPDIR);
MoToStepper stepperConv(400, STEPDIR);


bool grabSequence = 0;

//grabber
MoToServo grabberServo;

//recording variables
bool isRecording = false;
bool isReplaying = false;
int recordedPositions[MAX_POSITIONS][3];  // Array to store [xPos, lowSteps, highSteps, gripperState]
int positionCount = 0;